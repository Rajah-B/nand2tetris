// bootstrap 
@256
D=A
@0
M=D
// call Sys.init 0
@bootstrap.return-address.0
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@0
D=M-D
@5
D=D-A
@2
M=D
@0
D=M
@1
M=D
@Sys.init
0;JMP
(bootstrap.return-address.0)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@0
D=A
@2
A=D+M
D=M
@0
A=M
M=D
@0
M=M+1
// push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
// lt
@0
AM=M-1
D=M
@0
AM=M-1
D=M-D
@0
A=M
M=-1
@COMP.0.TRUE
D;JLT
@0
A=M
M=0
(COMP.0.TRUE)
@0
M=M+1
// if-goto IF_TRUE
@0
AM=M-1
D=M
@Main.fibonacci$IF_TRUE
D;JNE
// goto IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
// label IF_TRUE
(Main.fibonacci$IF_TRUE)
// push argument 0
@0
D=A
@2
A=D+M
D=M
@0
A=M
M=D
@0
M=M+1
// return 
@5
D=A
@1
D=M-D
A=D
D=M
@15
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@1
D=A
@1
D=M-D
A=D
D=M
@4
M=D
@2
D=A
@1
D=M-D
A=D
D=M
@3
M=D
@3
D=A
@1
D=M-D
A=D
D=M
@2
M=D
@4
D=A
@1
D=M-D
A=D
D=M
@1
M=D
@15
A=M
0;JMP
// label IF_FALSE
(Main.fibonacci$IF_FALSE)
// push argument 0
@0
D=A
@2
A=D+M
D=M
@0
A=M
M=D
@0
M=M+1
// push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
// sub
@0
AM=M-1
D=M
@0
A=M-1
M=M-D
// call Main.fibonacci 1
@Main.fibonacci.return-address.1
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@1
D=A
@0
D=M-D
@5
D=D-A
@2
M=D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci.return-address.1)
// push argument 0
@0
D=A
@2
A=D+M
D=M
@0
A=M
M=D
@0
M=M+1
// push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
// sub
@0
AM=M-1
D=M
@0
A=M-1
M=M-D
// call Main.fibonacci 1
@Main.fibonacci.return-address.2
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@1
D=A
@0
D=M-D
@5
D=D-A
@2
M=D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci.return-address.2)
// add
@0
AM=M-1
D=M
@0
AM=M-1
M=D+M
@0
M=M+1
// return 
@5
D=A
@1
D=M-D
A=D
D=M
@15
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@1
D=A
@1
D=M-D
A=D
D=M
@4
M=D
@2
D=A
@1
D=M-D
A=D
D=M
@3
M=D
@3
D=A
@1
D=M-D
A=D
D=M
@2
M=D
@4
D=A
@1
D=M-D
A=D
D=M
@1
M=D
@15
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
// call Main.fibonacci 1
@Sys.init.return-address.3
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@1
D=A
@0
D=M-D
@5
D=D-A
@2
M=D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Sys.init.return-address.3)
// label WHILE
(Sys.init$WHILE)
// goto WHILE
@Sys.init$WHILE
0;JMP
